buildscript {
    repositories {
        maven { url "http://jars.interlis.ch" }
        maven { url "http://download.osgeo.org/webdav/geotools/" }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath("ch.interlis:ili2c-tool:5.0.0")
    }
}

plugins {
    id "ch.so.agi.gretl" version "2.0.70"
    id "com.bmuschko.docker-remote-api" version "4.4.1"
}

apply from: "$rootDir/gradle/versioning.gradle"

import ch.so.agi.gretl.tasks.*
import ch.so.agi.gretl.api.*
import java.text.SimpleDateFormat
import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer.ExposedPort
import com.bmuschko.gradle.docker.tasks.container.DockerStopContainer

task createIliModelsXml(type: IliRepositorizer) {
    description = "Create ilimodels.xml file."
    modelsDir = file("models/")
    dataFile = "ilimodels.xml"
}

task validateIliModelsXml(type: IliValidator) {
    description = "Validate ilimodels.xml file."
    dataFiles = ["ilimodels.xml"]
    logFile = "ilivalidator.log"
}

task versionTxt()  {
    description = "Create a version.txt file with some information about the build."
    outputs.upToDateWhen { false }
    doLast {
        new File("version.txt").text = """
Version: $version
Revision: ${getCheckedOutGitCommitHash()}
Buildtime: ${new SimpleDateFormat("dd-MM-yyyy HH:mm:ss").format(new Date())}
Application-name: sogis-interlis-repository
"""
    }
}

def getCheckedOutGitCommitHash() {
    'git log -1 --pretty=%H'.execute().text.trim()
}

docker {
    registryCredentials {
        username = System.env.dockerRegistryUser
        password = System.env.dockerRegistryPass
    }
}

task buildDockerImage(type: DockerBuildImage) {
    description = "Build docker image."
    inputDir = project.rootDir
    tags = ["sogis/interlis-repository:"+version, "sogis/interlis-repository:latest"]
    labels = ["interlis-repository.created": new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()), 
            "interlis-repository.git_commit":  getCheckedOutGitCommitHash(), 
            "interlis-repository.travis_build": version]    
}

task createDockerContainer(type: DockerCreateContainer) {
    description = "Create docker container."
    targetImageId buildDockerImage.getImageId()
    portBindings = ['8080:8080']
    exposedPorts = [new ExposedPort("tcp", [8080])]    
}

task startDockerContainer(dependsOn: 'createDockerContainer', type: DockerStartContainer) {	
    description = "Start docker container."
    targetContainerId createDockerContainer.getContainerId()

    // Starting container != web service is ready.
    doLast { 
        sleep(4*1000)
    }
}

task stopDockerContainer(type: DockerStopContainer) {
    description = "Stop running docker container."
    targetContainerId createDockerContainer.getContainerId()
}

task pushDockerImage_One(type: DockerPushImage) {
    description = "Push docker image to hub.docker.com."
    imageName =  "sogis/interlis-repository:latest"
}

task pushDockerImage_Two(type: DockerPushImage) {
    description = "Push docker image to hub.docker.com)."
    imageName =  "sogis/interlis-repository:"+version
}

task pushDockerImages() {
    description = "Push docker images to hub.docker.com)."
    doFirst{
        println "Push Docker Images"
    }
}

pushDockerImages.dependsOn {
    tasks.findAll { task -> task.name.startsWith('pushDockerImage_') }
}

// It will fail if repository is not ok.
// "Process 'command '/Library/Java/JavaVirtualMachines/jdk8u192-b12/Contents/Home/bin/java'' finished with non-zero exit value 1"
task checkInterlisRepository(type: JavaExec) {
    classpath = buildscript.configurations.classpath
    main = 'ch.interlis.ili2c.Main'
    args  "--check-repo-ilis", "http://localhost:8080"
}

checkInterlisRepository.finalizedBy stopDockerContainer

// This is how you can grap standard out or standard error.
/*
task checkInterlisRepository() {
    description = "Checks the interlis repository (ili2c --check-repo-ilis)"    
    doLast {
        def os = new ByteArrayOutputStream()
        javaexec {
            classpath = buildscript.configurations.classpath
            main = 'ch.interlis.ili2c.Main'
            args  "--check-repo-ilis", "http://localhost"
            //errorOutput = os
            standardOutput = os
        }
        def buildString = os.toString()
    }
}
*/