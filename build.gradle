buildscript {
    repositories {
        maven { url "https://jars.interlis.ch" }
        mavenCentral()
    }
    dependencies {
        classpath("ch.interlis:ili2c-tool:5.2.7")
    }
}

plugins {
    //id "ch.so.agi.gretl" version "2.0.70"
    id "ch.so.agi.interlis-repository-creator" version "1.3.17"
    //id "com.bmuschko.docker-remote-api" version "4.4.1"
}


configurations.all {
    resolutionStrategy {
        force 'ch.interlis:ili2c-tool:5.2.7'
        force 'ch.interlis:ili2c-core:5.2.7'    
    }
}

apply from: "$rootDir/gradle/versioning.gradle"

def GROUP = "INTERLIS repository creation"

//import ch.so.agi.gretl.tasks.*
//import ch.so.agi.gretl.api.*
import ch.so.agi.tasks.InterlisRepositoryCreator
import java.text.SimpleDateFormat
//import com.bmuschko.gradle.docker.tasks.image.Dockerfile
//import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
//import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
//import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
//import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
//import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer.ExposedPort
//import com.bmuschko.gradle.docker.tasks.container.DockerStopContainer

task createIliModelsXml(type: InterlisRepositoryCreator) {
    group = GROUP
    description = "Create ilimodels.xml file."
    modelsDir = file("models/")
    dataFile = "ilimodels.xml"
    ilismeta = true
}
createIliModelsXml.finalizedBy versionTxt

/*
task validateIliModelsXml(type: IliValidator) {
    description = "Validate ilimodels.xml file."
    dataFiles = ["ilimodels.xml"]
    logFile = "ilivalidator.log"
}
*/

task addXslDeclaration() {
    group = GROUP
    description = "Add XSL declaration to ilimodels.xml"
    doLast {
        def file = new File("ilimodels.xml")
        def content = file.text
        content = content.replaceAll("\\<\\?xml(.+?)\\?\\>", "").trim();
        content = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + "<?xml-stylesheet type=\"text/xsl\" href=\"ilimodels.xsl\"?>\n" + content
        file.write content
    }
}    

task versionTxt()  {
    group = GROUP
    description = "Create a version.txt file with some information about the build."
    outputs.upToDateWhen { false }
    doLast {
        new File("version.txt").text = """
Version: $version
Revision: ${getCheckedOutGitCommitHash()}
Buildtime: ${new SimpleDateFormat("dd-MM-yyyy HH:mm:ss").format(new Date())}
Application-name: sogis-interlis-repository
"""
    }
}

def getCheckedOutGitCommitHash() {
    'git log -1 --pretty=%H'.execute().text.trim()
}

def DOCKER_ACCOUNT = "sogis"
def DOCKER_REPO = "interlis-repository"
def CONTAINER_NAME = "ilirepo"

// only for testing
task buildImage(type: Exec) {
    workingDir "$projectDir"
    commandLine 'docker', 'build',
                '--no-cache', '--force-rm',
                '-t', "$DOCKER_ACCOUNT/$DOCKER_REPO:latest",
                '-f', 'Dockerfile',  '.'
}

task startContainer(type: Exec){
    workingDir "$projectDir"
    commandLine 'docker', 'run', '--name', CONTAINER_NAME, '--rm', '-p8080:8080', "$DOCKER_ACCOUNT/$DOCKER_REPO:latest"
     
    doLast { 	
        sleep(10000)
    }
}

task stopContainer(type: Exec){
    workingDir "$projectDir"
    commandLine 'docker', 'kill', CONTAINER_NAME
}

// It will fail if repository is not ok.
// "Process 'command '/Library/Java/JavaVirtualMachines/jdk8u192-b12/Contents/Home/bin/java'' finished with non-zero exit value 1"
// Es muss --ilidirs verwendet werden, um das localhost-Repo als Quelle für Modell-Importe verwenden zu können (d.h. Solothurner Modelle
// importieren Solothurner Modelle.). Aber das produktive Repo darf (sollte) nicht verwendet werden. Das kann aber wohl nicht definitiv 
// unterbunden werden (?).
task checkInterlisRepository(type: JavaExec) {
    group = GROUP
    description = "Check repository with --check-repo-ilis"
    classpath = buildscript.configurations.classpath
    main = 'ch.interlis.ili2c.Main'
    args  "--check-repo-ilis", "http://localhost:8080", "--ilidirs", "%ILI_DIR;http://models.interlis.ch/;http://models.geo.admin.ch;https://vsa.ch/models;http://localhost:8080"
}

checkInterlisRepository.finalizedBy stopContainer

// This is how you can grep standard out or standard error.
/*
task checkInterlisRepository() {
    description = "Checks the interlis repository (ili2c --check-repo-ilis)"    
    doLast {
        def os = new ByteArrayOutputStream()
        javaexec {
            classpath = buildscript.configurations.classpath
            main = 'ch.interlis.ili2c.Main'
            args  "--check-repo-ilis", "http://localhost"
            //errorOutput = os
            standardOutput = os
        }
        def buildString = os.toString()
    }
}
*/
